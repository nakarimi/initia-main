<?php
use Drupal\node\Entity\Node;

use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;

function initia_preprocess_page(&$variables)
{
  $variables['#attached']['library'][] = 'initia/global-scripts';
}
function initia_preprocess_views_view(array &$variables)
{
  // Check for your specific view display.
  // You can check by view id or display id.
  if ($variables['view']->id() == 'catalogue_de_formations' && $variables['display_id'] == 'page_1') {
    // Load taxonomy terms from the 'Type de formation' vocabulary.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadTree('type_de_formation'); // Use your vocabulary machine name.

    $term_list = [];
    foreach ($terms as $term) {
      $query = \Drupal::entityQuery('node')
        ->accessCheck(FALSE) // Explicitly disable access checks.
        ->condition('status', 1)
        ->condition('type', 'formation')
        ->condition('field_type_de_formation', $term->tid);
      $count = $query->count()->execute();

      $term_list[] = [
        'tid'  => $term->tid,
        'name' => $term->name  . ' (' . $count . ')',
        // Build a URL to the taxonomy term page.
        'url'  => \Drupal\Core\Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->tid])->toString(),
      ];
    }
    // Make available to your Twig template.
    $variables['sidebar_type_de_formation'] = $term_list;

    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadTree('categories_formation'); // Use your vocabulary machine name.

    $term_list = [];
    foreach ($terms as $term) {
      // $query = \Drupal::entityQuery('node')
      //   ->accessCheck(FALSE) // Explicitly disable access checks.
      //   ->condition('status', 1)
      //   ->condition('type', 'formation')
      //   ->condition('categories_formation', $term->tid);
      // $count = $query->count()->execute();

      $term_list[] = [
        'tid'  => $term->tid,
        'name' => $term->name,
        // 'name' => $term->name  . ' (' . $count . ')',
        // Build a URL to the taxonomy term page.
        'url'  => \Drupal\Core\Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->tid])->toString(),
      ];
    }
    // Make available to your Twig template.
    $variables['sidebar_categories_formation'] = $term_list;
  } else if ($variables['view']->id() == 'formations_presentielles' && $variables['display_id'] == 'page_1') {
    // Load taxonomy terms from the 'Type de formation' vocabulary.
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadTree('type_de_formation'); // Use your vocabulary machine name.

    $term_list = [];
    foreach ($terms as $term) {
      $term_list[] = [
        'tid'  => $term->tid,
        'name' => $term->name,
        // Build a URL to the taxonomy term page.
        'url'  => \Drupal\Core\Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->tid])->toString(),
      ];
    }
    // Make available to your Twig template.
    $variables['sidebar_type_de_formation'] = $term_list;

    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadTree('categories_formation'); // Use your vocabulary machine name.

    $term_list = [];
    foreach ($terms as $term) {

      $file = \Drupal\file\Entity\File::load($term->field_icon->target_id);
      $term_obj = Term::load($term->tid);
      $file_id = $term_obj->get('field_icon')->target_id;
      $file = \Drupal\file\Entity\File::load($file_id);

      $icon_url = $file ? $file->createFileUrl() : '';

      $term_list[] = [
        'tid'  => $term->tid,
        'name' => $term->name,
        'icon' => $icon_url,
        'url'  => \Drupal\Core\Url::fromRoute('entity.taxonomy_term.canonical', ['taxonomy_term' => $term->tid])->toString(),
      ];
    }
    // Make available to your Twig template.
    $variables['sidebar_categories_formation'] = $term_list;
    $variables['custom_filter_by_checkboxes'] = [
      ["name" => "Eligible CPF", "tid" => "field_eligible_cpf_value"] ,
      ["name" => "Eligible aux Elus", "tid" => "field_eligible_aux_elus_value"] ,
      ["name" => "Formation populaire", "tid" => "field_formation_populaire_value"] ,
      ["name" => "Formation diplomante", "tid" => "field_formation_diplomante_value_1"] ,
    ];
  }
}


/**
 * Implements hook_preprocess_field().
 */
function initia_preprocess_field(&$variables)
{
  // Check for the specific field machine name.
  if ($variables['element']['#field_name'] == 'field_chiffres_cles') {
    // Loop through each item (assuming multiple values might be present).
    foreach ($variables['items'] as $delta => $item) {
      // Get the rendered HTML markup.
      $html = isset($item['#markup']) ? $item['#markup'] : '';

      // Replace <br> and <br /> tags with newline characters.
      $with_newlines = str_replace(['<br>', '<br />'], "\n", $html);

      // Strip any remaining HTML tags.
      $text = strip_tags($with_newlines);

      // Split the text into an array by newlines. Use preg_split to handle multiple newlines.
      $values = preg_split('/\r\n|\r|\n/', $text, -1, PREG_SPLIT_NO_EMPTY);

      // Trim each value.
      $values = array_map('trim', $values);

      // Now, you have an array of values.
      // For example, if you want to set a custom variable for your template, do:
      $variables['items'][$delta]['#reformatted_values'] = $values;

      // Alternatively, if you want to change the output markup,
      // you could reassemble the array into a custom markup string:
      // $variables['items'][$delta]['#markup'] = '<pre>' . print_r($values, TRUE) . '</pre>';
    }
  }
}


/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function initia_preprocess_node(&$variables) {

  if ($variables['node']->bundle() === 'pre_inscription') {
    $request = \Drupal::request();
    $formation_id = $request->query->get('formation_id');

    if ($formation_id && is_numeric($formation_id)) {
      $formation_node = Node::load($formation_id);
      if ($formation_node && $formation_node->bundle() === 'formation') {
        // Render the formation node using 'card' view mode
        $view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
        $formation_card = $view_builder->view($formation_node, 'side_card');
        // Disable cache
        $formation_card['#cache']['max-age'] = 0;
        $formation_card['#cache']['contexts'][] = 'url.query_args:formation_id';

        $variables['formation_card'] = $formation_card;
      }
    }
  }
  
  // if ($variables['node']->bundle() == 'formation') {
  //   // Get front page node ID from site config
  //   $front_page_nid = \Drupal::config('system.site')->get('page.front');
  //   $front_page_nid = str_replace('/node/', '', $front_page_nid); // Extract ID safely

  //   // Load the front page node
  //   if ($front_page_nid && is_numeric($front_page_nid)) {
  //     $front_page_node = \Drupal\node\Entity\Node::load($front_page_nid);

  //     if ($front_page_node && $front_page_node->hasField('field_nos_diplomes_temoignent')) {
  //       $paragraphs = $front_page_node->get('field_nos_diplomes_temoignent')->referencedEntities();
  //       $variables['field_commencez_votre_parcours'] = $front_page_node->get('field_commencez_votre_parcours')->referencedEntities();
  //       // Pass paragraph entities to Twig
  //       $variables['field_nos_diplomes_temoignent'] = $paragraphs;
  //     }
  //   }
  // }
}