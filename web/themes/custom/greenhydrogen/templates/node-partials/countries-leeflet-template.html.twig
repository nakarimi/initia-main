
<script src="//www.amcharts.com/lib/4/core.js"></script>
<script src="//www.amcharts.com/lib/4/charts.js"></script>
<script src="//www.amcharts.com/lib/4/maps.js"></script>
<script src="//www.amcharts.com/lib/4/themes/animated.js"></script>
<script src="//www.amcharts.com/lib/4/geodata/worldLow.js"></script>
<div id="chartdiv"></div>

<div id="countries_data" class="d-none">
    {{ rows }}
</div>
<script>
var locations = [];

// Get the list of countres and provide the data for the map.
const MATCHES = document.querySelectorAll("#countries_data .views-row");

// Create map instance
var chart = am4core.create("chartdiv", am4maps.MapChart);

// Set map definition
chart.geodata = am4geodata_worldLow;

// Set projection
chart.projection = new am4maps.projections.Miller();

// Create map polygon series
var polygonSeries = chart.series.push(new am4maps.MapPolygonSeries());

// Make map load polygon (like country names) data from GeoJSON
polygonSeries.useGeodata = true;

// Configure series
var polygonTemplate = polygonSeries.mapPolygons.template;
polygonTemplate.tooltipText = `{name}
[p]{body}[/]`;
polygonTemplate.fill = am4core.color("#dbdddf");

// Create hover state and set alternative fill color
var hs = polygonTemplate.states.create("hover");
hs.properties.fill = am4core.color("#154734");

// Remove Antarctica
polygonSeries.exclude = ["AQ"];

// Add some data
polygonSeries.data = [];

MATCHES.forEach(function(item) {
  let sel1 = item.querySelector(".views-field-body .field-content");
  if(sel1){
    var regex = /(<([^>]+)>)/ig;
    var body = sel1.innerHTML;
    body = body.replace(regex, "");
  }else{
    var body = null;
  }
  let sel2 = item.querySelector(".views-field-field-country-color .field-content");
  if(sel2){
    var color = sel2.innerHTML;
  }else{
    var color = null;
  }

  let sel3 = item.querySelector(".views-field-title .field-content a");
  if(sel3){
    var name = sel3.innerHTML;
  }else{
    var name = null;
  }

  let sel4 = item.querySelector(".views-field-title .field-content a");
  if(sel4){
    var link = sel4.getAttribute('href');
  }else{
    var link = null;
  }

  let sel5 = item.querySelector(".views-field-field-country .field-content");
  if(sel5){
    var ios_code = sel5.innerHTML;
  }else{
    var ios_code = null;
  }

  let sel6 = item.querySelector(".views-field-nid .field-content");
  if(sel6){
    var nid = sel6.innerHTML;
  }else{
    var nid = null;
  }

  polygonSeries.data.push({
    "id": ios_code,
    "nid": nid,
    "name": name,
    "link": link,
    "body": body,
    "fill": am4core.color(color)
  });
});


// Bind "fill" property to "fill" key in data
polygonTemplate.propertyFields.fill = "fill";
// Remove Antarctica
polygonSeries.exclude = ["AQ"];

// Disable zoom and pan
chart.maxZoomLevel = 1;
chart.seriesContainer.draggable = false;
chart.seriesContainer.resizable = false;

// Action to change the cursor if there is available link.
polygonTemplate.events.on("over", function(ev) {
  var data = ev.target.dataItem.dataContext;
  if(data.nid){
    document.getElementById("chartdiv").style.cursor = 'pointer';
  }else {
    document.getElementById("chartdiv").style.cursor = 'auto';
  }
}, this);

// Add action for click on the countries.
polygonTemplate.events.on("hit", function(ev) {
  var data = ev.target.dataItem.dataContext;

  if(data.nid){
    window.location.href = window.location.origin + "/node/" + data.nid;
  }
});
</script>