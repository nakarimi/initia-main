{{ attach_library('initia/global-scripts') }}

{% set classes = [
  'view',
  'view-' ~ id|clean_class,
  'view-id-' ~ id,
  'view-display-id-' ~ display_id,
  dom_id ? 'js-view-dom-id-' ~ dom_id,
] %}
<div{{attributes.addClass(classes)}}>
	<section id="title-page">
		<div class="container-fluid">
			<h1 class="page-title mt-4">
				{{ view.getTitle() }}
			</h1>
			<ul class="breadcrumb">
				<li>
					<a href="/">
						Home
					</a>
				</li>
				<li>
					{{ view.getTitle() }}
				</li>
			</ul>
		</div>
	</section>

	<div class="c-listing__inner o-container">
		{{ title_prefix }}
		{% if title %}
			{{ title }}
		{% endif %}
		{{ title_suffix }}

		{% if attachment_before %}
			<div class="c-listing__attachment c-listing__attachment-before">
				{{ attachment_before }}
			</div>
		{% endif %}

		{# Output the contextual filter argument, if available #}
		{% if view.args is defined and view.args[0] is defined %}
			<div class="view-argument">
				<h3>Filter Argument:</h3>
				<p>{{ view.args[0] }}</p>
			</div>
		{% endif %}
		{# Print the contextual filter argument, if available. #}
		{% if view.args[0] is defined %}
			<div class="view-argument">
				<h3>Filter Argument:</h3>
				<p>{{ view.args[0] }}</p>
			</div>
		{% endif %}

		{% set has_padding_top = (header is not empty or exposed['#sorters'] is not empty) %}
		<div class="c-listing__content">
			{% if header is not empty %}
				<div class="c-listing__results-count">
					{{ header }}
				</div>
			{% endif %}

			<section id="menu-content">
				<div class="container-fluid mt-3">
					<div class="menu-content d-flex flex-column flex-lg-row justify-content-between">
						<div class="show-menu">
							<svg width="32" height="32" viewbox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M13.3337 8H21.3337M13.3337 18.6667H21.3337M13.3337 13.3333H29.3337M13.3337 24H29.3337M4.00033 13.3333H6.66699C7.40337 13.3333 8.00033 12.7364 8.00033 12V9.33333C8.00033 8.59695 7.40337 8 6.66699 8H4.00033C3.26395 8 2.66699 8.59695 2.66699 9.33333V12C2.66699 12.7364 3.26395 13.3333 4.00033 13.3333ZM4.00033 24H6.66699C7.40337 24 8.00033 23.403 8.00033 22.6667V20C8.00033 19.2636 7.40337 18.6667 6.66699 18.6667H4.00033C3.26395 18.6667 2.66699 19.2636 2.66699 20V22.6667C2.66699 23.403 3.26395 24 4.00033 24Z" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
							</svg>
						</div>
						<a class="d-none  hidden-to-replace active">reppp me</a>
						{# {% if sidebar_type_de_formation is defined and sidebar_type_de_formation|length %}
							{% for term in sidebar_type_de_formation %} #}
							{% if sidebar_categories_formation is defined and sidebar_categories_formation|length %}
								{% for term in sidebar_categories_formation %}
									<a data-id="{{ term.name|striptags|lower|replace({' ': '_'}) }}" href="#{{ term.name|striptags|lower|replace({' ': '_'}) }}" class="custom-link">
										{% if term.icon %}
											<img width="32" height="32" src="{{ term.icon }}" alt="{{ term.name }}">
										{% endif %}
										{{ term.name }}
									</a>
								{% endfor %}
							{% endif %}
					</div>
				</div>
			</section>
			<section id="content_filter_section">
				<div class="container-fluid mt-3">
					<div class="d-flex justify-content-start col-md-6 col-lg-4 col-12 filter-select">
						<select name="field_type_de_formation_target_id" class="form-select form-select-lg me-2" aria-label="Default select example">
							{% if sidebar_type_de_formation is defined and sidebar_type_de_formation|length %}
								{% for term in sidebar_type_de_formation %}
									<option value="{{term.tid}}">{{term.name}}</option>
								{% endfor %}
							{% endif %}

						</select>
						<select name="custom_filter_by_checkboxes" class="form-select form-select-lg" aria-label="Default select example">
							{% if custom_filter_by_checkboxes is defined and custom_filter_by_checkboxes|length %}
								{% for term in custom_filter_by_checkboxes %}
									<option value="{{term.tid}}">{{term.name}}</option>
								{% endfor %}
							{% endif %}
						</select>
					</div>
				</div>
			</section>
			{% if rows %}
				<div class="c-listing__items">
					<div class="container-fluid my-5">
						<div class="row">
							{{ rows }}
						</div>
					</div>
				</div>
				{% if pager %}
					{{ pager }}
				{% endif %}
			{% elseif empty %}

				<div class="c-listing__empty">
					<div class="c-listing__empty-inner o-content-from-editor">
						{% if site_settings.search_settings.search_settings.field_no_results_title is not empty %}
							<h3>{{ site_settings.search_settings.search_settings.field_no_results_title }}</h3>
						{% endif %}

						{% if site_settings.search_settings.search_settings.field_no_results_text.value|raw is not empty %}
							<p>{{ site_settings.search_settings.search_settings.field_no_results_text.value|raw }}</p>
						{% endif %}
					</div>
				</div>
			{% endif %}
		</div>

		{% if attachment_after %}
			<div class="c-listing__attachment c-listing__attachment-after">
				{{ attachment_after }}
			</div>
		{% endif %}
		{% if more %}
			{{ more }}
		{% endif %}
		{% if footer %}
			<div class="c-listing__footer">
				{{ footer }}
			</div>
		{% endif %}
		{% if feed_icons %}
			<div class="c-listing__feed-icons">
				{{ feed_icons }}
			</div>
		{% endif %}
	</div>
</div>


<script>
document.addEventListener('DOMContentLoaded', function() {
  const filterContainer = document.getElementById('content_filter_section');

  if (filterContainer) {
    const observer = new MutationObserver(function(mutations) {
      attachEventListeners(filterContainer);
    });

    observer.observe(filterContainer, { childList: true, subtree: true });

    setFiltersFromQuery(filterContainer);
    attachEventListeners(filterContainer);
  } else {
    console.error("Filter container not found.");
  }

  // Select all anchor elements with the class .custom-link
const customLinks = document.querySelectorAll('a.custom-link');

customLinks.forEach(link => {
    // Get the id from data-id attribute
    const id = link.getAttribute('data-id');
    
    // Find the div with the matching id
    const matchingDiv = document.getElementById(id);
    
    if (matchingDiv) {
        // Find the img inside the .custom-link
        const img = link.querySelector('img');
        
        if (img) {
            // Clone the img
            const clonedImg = img.cloneNode(true);
            // Find the h2 inside the matching div
            const h2Element = matchingDiv.querySelector('h2');
            clonedImg.style.width = '48px';
			clonedImg.style.height = '48px';
            if (h2Element) {
                // Insert the cloned img inside the h2
                h2Element.insertBefore(clonedImg, h2Element.firstChild);
            }
        }
    }
});
// Select all elements with the class .tax-box
const taxBoxes = document.querySelectorAll('.tax-box');

taxBoxes.forEach(box => {
    // Find the h2 element inside the current tax-box
    const h2Element = box.querySelector('h2');

    if (h2Element) {
        // Find the existing anchor element inside the h2
        const linkElement = h2Element.querySelector('a');

        if (linkElement) {
            // Get the link from the anchor element
            const link = linkElement.href; // Get the href attribute of the link
            
            // Find the anchor with the class .rounded-pill inside the current tax-box
            const roundedPillLink = box.querySelector('a.rounded-pill');

            if (roundedPillLink) {
                // Set the href of the rounded-pill link to the extracted link
                roundedPillLink.href = link;
            }
        }
    }
});


});

function attachEventListeners(filterContainer) {
  const inputs = filterContainer.querySelectorAll('input[type="checkbox"], input[type="radio"], select');
  
  inputs.forEach(input => {
    input.removeEventListener('change', handleInputChange);
    input.addEventListener('change', handleInputChange);
  });
}

function handleInputChange() {
  const filterContainer = document.getElementById('content_filter_section');
  let selectedFilters = {};

  selectedFilters['field_type_de_formation_target_id'] = Array.from(filterContainer.querySelectorAll('input[name="field_type_de_formation_target_id[]"]:checked')).map(cb => cb.value);
  selectedFilters['field_sujet_target_id'] = Array.from(filterContainer.querySelectorAll('input[name="field_sujet_target_id[]"]:checked')).map(cb => cb.value);

  const formationDiplomante = filterContainer.querySelector('input[name="field_formation_diplomante_value"]:checked');
  selectedFilters['field_formation_diplomante_value'] = formationDiplomante ? formationDiplomante.value : '';

  const accessible = filterContainer.querySelector('input[name="field_accessible_value"]:checked');
  selectedFilters['field_accessible_value'] = accessible ? accessible.value : '';

  const selectField = filterContainer.querySelector('select[name="field_type_de_formation_target_id"]');
  if (selectField) {
    selectedFilters['field_type_de_formation_target_id'] = selectField.value ? [selectField.value] : [];
  }

  // Handling the custom dropdown filter
  const customSelect = filterContainer.querySelector('select[name="custom_filter_by_checkboxes"]');
  if (customSelect && customSelect.value) {
    selectedFilters[customSelect.value] = '1';
  }

  console.log(selectedFilters);

  let baseUrl = window.location.origin +"/"+ window.location.pathname;

  let queryString = buildCustomQueryString(selectedFilters);
  let redirectUrl = baseUrl + '?' + queryString;
  window.location.href = redirectUrl;
}

function buildCustomQueryString(params) {
  let queryString = '';
  for (const key in params) {
    if (Array.isArray(params[key])) {
      params[key].forEach(value => {
        queryString += `${encodeURIComponent(key)}%5B%5D=${encodeURIComponent(value)}&`;
      });
    } else if (params[key] !== '') {
      queryString += `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}&`;
    }
  }
  return queryString.slice(0, -1);
}

function setFiltersFromQuery(filterContainer) {
  const urlParams = new URLSearchParams(window.location.search);

  // Set values for select fields based on URL params
  if (urlParams.has("field_type_de_formation_target_id[0]")) {
    const fieldTypeSelect = filterContainer.querySelector(`select[name="field_type_de_formation_target_id"]`);
    if (fieldTypeSelect) {
      fieldTypeSelect.value = urlParams.get("field_type_de_formation_target_id[0]");
    }
  }

  if (urlParams.has("field_eligible_aux_elus_value")) {
    const customFilterSelect = filterContainer.querySelector(`select[name="custom_filter_by_checkboxes"]`);
    if (customFilterSelect) {
      customFilterSelect.value = "field_eligible_aux_elus_value";
    }
  }
  if (urlParams.has("field_eligible_cpf_value")) {
    const customFilterSelect = filterContainer.querySelector(`select[name="custom_filter_by_checkboxes"]`);
    if (customFilterSelect) {
      customFilterSelect.value = "field_eligible_cpf_value";
    }
  }
  if (urlParams.has("field_formation_diplomante_value_1")) {
    const customFilterSelect = filterContainer.querySelector(`select[name="custom_filter_by_checkboxes"]`);
    if (customFilterSelect) {
      customFilterSelect.value = "field_formation_diplomante_value_1";
    }
  }
  if (urlParams.has("field_formation_populaire_value")) {
    const customFilterSelect = filterContainer.querySelector(`select[name="custom_filter_by_checkboxes"]`);
    if (customFilterSelect) {
      customFilterSelect.value = "field_formation_populaire_value";
    }
  }
}


</script>