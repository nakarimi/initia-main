{{ attach_library('initia/global-scripts') }}

{% set classes = [
  'view',
  'view-' ~ id|clean_class,
  'view-id-' ~ id,
  'view-display-id-' ~ display_id,
  dom_id ? 'js-view-dom-id-' ~ dom_id,
] %}
<div{{attributes.addClass(classes)}}>
	<section id="cours-recommande-slider">
		<div class="container-fluid mt-5">
			<div class="cours-recommande">
				<div class="row">
					<div class="col-lg-3 ps-3 pt-4 mb-4">
						<h2 class="mb-3">Cours recommandé</h2>
						<p>De nombreux participants ont apprécié ce cours très bien noté pour son contenu
																																																																																																																			                                intéressant.</p>
						<div class="slider-dots-box"></div>

					</div>
					<div class="col-lg-8 offset-lg-1">
						<div class="slider">
							{{ rows }}
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</div>


 <script>
document.addEventListener('DOMContentLoaded', function() {
  const filterContainer = document.getElementById('content_filter_section');

  if (filterContainer) {
    const observer = new MutationObserver(function(mutations) {
      attachEventListeners(filterContainer);
    });

    observer.observe(filterContainer, { childList: true, subtree: true });

    attachEventListeners(filterContainer);
    setFiltersFromQuery(filterContainer);
  } else {
    console.error("Filter container not found.");
  }
});

function attachEventListeners(filterContainer) {
  const inputs = filterContainer.querySelectorAll('input[type="checkbox"], input[type="radio"], select');
  
  inputs.forEach(input => {
    input.removeEventListener('change', handleInputChange);
    input.addEventListener('change', handleInputChange);
  });
}

function handleInputChange() {
  const filterContainer = document.getElementById('content_filter_section');
  let selectedFilters = {};

  selectedFilters['field_type_de_formation_target_id'] = Array.from(filterContainer.querySelectorAll('input[name="field_type_de_formation_target_id[]"]:checked')).map(cb => cb.value);
  selectedFilters['field_sujet_target_id'] = Array.from(filterContainer.querySelectorAll('input[name="field_sujet_target_id[]"]:checked')).map(cb => cb.value);
  selectedFilters['field_type_de_formation_target_id_2'] = Array.from(filterContainer.querySelectorAll('input[name="field_type_de_formation_target_id_2[]"]:checked')).map(cb => cb.value);

  const formationDiplomante = filterContainer.querySelector('input[name="field_formation_diplomante_value"]:checked');
  selectedFilters['field_formation_diplomante_value'] = formationDiplomante ? formationDiplomante.value : '';

  const accessible = filterContainer.querySelector('input[name="field_accessible_value"]:checked');
  selectedFilters['field_accessible_value'] = accessible ? accessible.value : '';

  const selectField = filterContainer.querySelector('select[name="field_type_de_formation_target_id"]');
  if (selectField) {
    selectedFilters['field_type_de_formation_target_id'] = selectField.value ? [selectField.value] : [];
  }

  console.log(selectedFilters);

  let baseUrl = window.location.origin +"/"+ window.location.pathname;

  let queryString = buildCustomQueryString(selectedFilters);
  let redirectUrl = baseUrl + '?' + queryString;
  window.location.href = redirectUrl;
}

function buildCustomQueryString(params) {
  let queryString = '';
  for (const key in params) {
    if (Array.isArray(params[key])) {
      params[key].forEach(value => {
        queryString += `${encodeURIComponent(key)}%5B%5D=${encodeURIComponent(value)}&`;
      });
    } else if (params[key] !== '') {
      queryString += `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}&`;
    }
  }
  return queryString.slice(0, -1);
}

function setFiltersFromQuery(filterContainer) {
  const urlParams = new URLSearchParams(window.location.search);

  urlParams.forEach((value, key) => {
    const checkboxes = filterContainer.querySelectorAll(`input[name="${key}[]"], input[name="${key}"]`);
    checkboxes.forEach(checkbox => {
      if (checkbox.value === value) {
        checkbox.checked = true;
      }
    });

    const selectField = filterContainer.querySelector(`select[name="${key}"]`);
    if (selectField) {
      selectField.value = value;
    }
  });
}


</script>
